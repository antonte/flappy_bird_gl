#version 330 core

layout(location = 3) in vec2 sphereXy;
float alpha = 0;
int x = 0;
int y = 0;
uniform mat4 mvp;
out float c;

mat4 rotate(float angle, vec3 axis)
{
  axis = normalize(axis);
  float s = sin(angle);
  float c = cos(angle);
  float oc = 1.0 - c;

  return mat4(oc * axis.x * axis.x + c,
              oc * axis.x * axis.y - axis.z * s,
              oc * axis.z * axis.x + axis.y * s,
              0.0, //
              oc * axis.x * axis.y + axis.z * s,
              oc * axis.y * axis.y + c,
              oc * axis.y * axis.z - axis.x * s,
              0.0, //
              oc * axis.z * axis.x - axis.y * s,
              oc * axis.y * axis.z + axis.x * s,
              oc * axis.z * axis.z + c,
              0.0, //
              0.0,
              0.0,
              0.0,
              1.0);
}
mat4 scale(vec3 s)
{
  return mat4(s.x,
              0,
              0,
              0, //
              0,
              s.y,
              0,
              0, //
              0,
              0,
              s.z,
              0, //
              0,
              0,
              0,
              1);
}

mat4 translate(vec3 t)
{
  return mat4(1,
              0,
              0,
              0, //
              0,
              1,
              0,
              0, //
              0,
              0,
              1,
              0, //
              t.x,
              t.y,
              t.z,
              1);
}

void main()
{
  gl_Position.xy = sphereXy;
  float R = 100;
  float z = sqrt(R*R - sphereXy.x * sphereXy.x - sphereXy.y*sphereXy.y);
  gl_Position.z = z;
  gl_Position.w = 1.0;
  gl_Position = mvp * translate(vec3(3, 3, 0)) * scale(vec3(0.03, 0.03, 0.03)) * gl_Position;
  c = z / 100.0;
}
